/**
 *  Run circulate in HVAC
 *
 *  Copyright 2014 Bob Sanford
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Run circulate in HVAC",
    namespace: "midyear66",
    author: "Bob Sanford",
    description: "Run circulate every X minutes if AC or heat has not been on",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience%402x.png")

preferences {
    page (name: "configApp")
}

def configApp() {
    dynamicPage(name: "configApp", install: true, uninstall: true) {
        section("Title") {
            paragraph "Run circulate in HVAC"
        }
        section("About") {
            paragraph "Run circulate every X minutes if AC or heat has not been on"
            paragraph "Additional setpoint can be used to determine minimum run temperature."
            paragraph "Version 1.1\nCopyright (c) 2014 ssetco.com"
        }
        section("Thermostat") {
            input "thermostat", "capability.thermostat", title:"Select thermostat to be controlled"
            input "interval", "number", title:"Set time between circulation cycles (in minutes)", defaultValue:30
            input "length", "number", title:"Set of length of circulation cycle (in minutes)", defaultValue:5
        }
        section("Choose a temperature sensor... "){
            input "tempSensors", "capability.temperatureMeasurement", title: "Temperature Sensor used to establish minimum run temperature", multiple: true, required: false
        }
        section("Choose a humidity sensor... "){
            input "rhSensors", "capability.relativeHumidityMeasurement", title: "Humidity Sensor used to establish minimum run humidity", multiple: true, required: false
        }
        section("Operation") {
            input "runHighTemp", "number", title:"Choose a temperature to set the minimum run high temperature.", defaultValue:80
            input "runHighRH", "number", title:"Choose a humidty to set the minimum run high humidity.", defaultValue:60
            input "delay", "number", title: "Polling delay (minutes):", required: true, defaultValue: 30
        }
        section (title: "More Options", hidden: ((modes) ? false : true), hideable: true) {
            label title: "Assign a name", required: false
            input "modes", "mode", title: "Only when mode is", multiple: true, required: false
            mode title: "Set for specific mode(s)", required: false
        }
	}
}

def installed() {
	DEBUG("Installed with settings: ${settings}")
    initialize()
}

def updated() {
	DEBUG("Updated with settings: ${settings}")
	unsubscribe()
	unschedule()
   	initialize()
	scheduleChecks()
}

def initialize() {
	state.schedulerEnabled = false
    state.recirculate = false
    subscribe(location, "mode", eventHandler)
	subscribe(thermostat, "thermostatOperatingState", eventHandler)
    LOG("initialize:: running_state=[${thermostat.currentValue("thermostatOperatingState")}] fan_mode=[${thermostat.currentValue("thermostatFanMode")}] state.schedulerEnabled=[${state.schedulerEnabled}] state.recirculate=[${state.recirculate}]")
	if (getModeOk() && thermostat.currentValue("thermostatOperatingState") == "idle")
    {
    	DEBUG("initialize:: idle - running scheduler()")
        state.schedulerEnabled = true
		scheduler()
    }
    if (getModeOk() && thermostat.currentValue("thermostatFanMode") == "fanOn")
    {
    	DEBUG("initialize:: Set fanAuto()")
        thermostat.fanAuto()
    }
}

private getModeOk() {
    def result = !modes || modes.contains(location.mode)
    //DEBUG("getModeOk=$result");
    result
}

def scheduleChecks() {
	def min = Math.round(Math.floor(Math.random() * 60))
    def exp = "$min */${delay} * * * ?"
    //DEBUG ("$exp")
    schedule(exp, statusCheck)
    state.hasRandomSchedule = true
}

def statusCheck() {
	if (getModeOk()) 
    {
        try
        {
        	thermostat?.refresh()
            //thermostat?.configure()
        }
        catch (all) 
        {
        	WARN("statusCheck:: refresh not supported for thermosatat")
        }
        
        LOG("statusCheck:: running_state=[${thermostat.currentValue("thermostatOperatingState")}] fan_mode=[${thermostat.currentValue("thermostatFanMode")}] state.schedulerEnabled=[${state.schedulerEnabled}] state.recirculate=[${state.recirculate}]")
        if (state.schedulerEnabled == false && thermostat.currentValue("thermostatOperatingState") == "idle")
        {
            DEBUG("statusCheck:: idle and scheduler not enabled - running scheduler()")
            state.schedulerEnabled = true
            scheduler()
        }
        else if (state.recirculate)
        {
            if (thermostat.currentValue("thermostatFanMode") == "fanAuto")
            {
            	DEBUG("statusCheck:: Set fanOn()")
                thermostat.fanOn()
            }
        }
        else
        {
            if (thermostat.currentValue("thermostatFanMode") == "fanOn")
            {
            	DEBUG("statusCheck:: Set fanAuto()")
                thermostat.fanAuto()
            }
        }
    }
}

def scheduler(){
	if (getModeOk() && state.schedulerEnabled == true) 
    {
        state.recirculate = false
        if (thermostat.currentValue("thermostatFanMode") == "fanOn")
        {
        	DEBUG("scheduler:: Set fanAuto()")
            thermostat.fanAuto()
        }
        def interval = settings.interval.toInteger() * 60
        def length = settings.length.toInteger() * 60
        LOG("scheduler:: Wating ${interval} seconds to turn fan on and ${length} seconds after that to turn it back off.")
        runIn(interval, start_circulate)
        runIn(interval+length, scheduler)
    }
}
        
def start_circulate(){
	if (getModeOk() && state.schedulerEnabled == true)
    {
        def maxTemp = 0
        def maxRH = 0
        for ( def i = 0; i < tempSensors?.size(); i++) 
        {
            maxTemp = Math.max(tempSensors[i].currentValue("temperature").toInteger(),maxTemp)
            DEBUG ("start_circulate:: total temp=${tempSensors?.size()}, i=$i, maxTemp=${maxTemp}")
        } 
        for ( def i = 0; i < rhSensors?.size(); i++) 
        {
            maxRH = Math.max(rhSensors[i].currentValue("humidity").toInteger(),maxRH)
            DEBUG ("start_circulate:: total rh=${rhSensors?.size()}, i=$i, maxRH=${maxRH}")
        } 

        DEBUG ("maxTemp=${maxTemp}, maxRH=${maxRH}")
        if (maxTemp >= runHighTemp)
        {
            if (thermostat.currentValue("thermostatFanMode") == "fanAuto")
            {
        		DEBUG("start_circulate:: Set fanOn() because of temperature")
                thermostat.fanOn()
                state.recirculate = true
            }
        }
        else if (maxRH >= runHighRH)
        {
            if (thermostat.currentValue("thermostatFanMode") == "fanAuto")
            {
        		DEBUG("start_circulate:: Set fanOn() because of humidity")
                thermostat.fanOn()
                state.recirculate = true
            }
        }
    }
}
   
def eventHandler(evt){
	LOG("eventHandler:: ${evt.name} changed to [${evt.value}]")
    if (evt.name == "mode")
    {
        if (!modes || modes.contains(evt.value)) 
        {
            DEBUG("eventHandler:: ${evt.name} change to ok mode [${evt.value}] - running initialize()]")
            initialize()
        }
        else if (!(!modes || modes.contains(evt.value))) 
        {
            WARN("eventHandler:: ${evt.name} change to not ok mode [${evt.value}]")
            unsubscribe()
            unschedule()
            subscribe(location, changedLocationMode)
        }
    }
    else if (getModeOk() && evt.name == "thermostatOperatingState") 
    {
        DEBUG("eventHandler:: ${evt.name} changed to [${evt.value}] - running initialize()")
        initialize()
   }
}

private def LOG(message){
	log.info message
}

private def DEBUG(message){
	log.debug message
}

private def WARN(message){
	log.warn message
}
